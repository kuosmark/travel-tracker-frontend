{"version":3,"sources":["GoogleApiWrapper.js","components/Images.js","LoginForm.js","App.js","index.js"],"names":["mapStyles","width","height","inlineStyle","modal","marginTop","display","MapContainer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","showingInfoWindow","activeMarker","selectedPlace","modalOpen","markers","title","name","position","lat","lng","onMarkerClick","props","marker","e","setState","onClose","onMapClicked","t","map","coord","latLng","renderMarkers","react_default","a","createElement","dist","onClick","handleOpen","handleClose","inherits","createClass","key","value","Modal","open","style","closeIcon","Header","Content","image","Image","wrapped","size","src","Description","google","zoom","initialCenter","Component","GoogleApiWrapper","_ref","apiKey","language","Container","LoginForm","className","Grid","textAlign","verticalAlign","Column","maxWidth","as","color","Icon","Form","Segment","Input","fluid","icon","iconPosition","placeholder","type","Button","Message","href","App","loggedIn","src_LoginForm","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4f9e74a2.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react'\nimport { Item, Grid, Icon, Image, Header, Modal, Button } from 'semantic-ui-react'\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n}\n\nconst inlineStyle = {\n  modal : {\n    \n    marginTop: '-250px',\n    display: 'fixed !important'\n  }\n}\n\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false,  //Hides or the shows the infoWindow\n    activeMarker: {},          //Shows the active marker upon click\n    selectedPlace: {},         //Shows the infoWindow to the selected place upon a marker\n    modalOpen: false,\n    markers: [{\n      title: \"Tässä on nuppi\",\n      name: \"The marker`s title will appear as a tooltip.\",\n      position: { lat: 37.778519, lng: -122.40564 }\n    }]\n  }\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n      modalOpen: true\n    })\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      })\n    }\n  }\n\n  onMapClicked = (t, map, coord) => {\n    const { latLng } = coord\n    const lat = latLng.lat()\n    const lng = latLng.lng()\n    this.setState({\n      markers: this.state.markers.concat({\n        title: 'Tässä on nuppi!',\n        name: 'Tähän tulee vaikka minkälaista tekstiä',\n        position: { lat: lat, lng: lng }\n      })\n    })\n  }\n\n  renderMarkers = () => {\n    const markers = this.state.markers\n    return markers.map(marker => <Marker\n      name={marker.name}\n      position={marker.position}\n      onClick={this.onMarkerClick} />)\n  }\n\n  handleOpen = () => this.setState({ modalOpen: true })\n\n  handleClose = () => this.setState({ modalOpen: false })\n\n  render() {\n    return (<div>\n      <Modal\n        open={this.state.modalOpen}\n        onClose={this.handleClose}\n        style={inlineStyle.modal}\n        closeIcon\n      >    <Modal.Header>Select a Photo</Modal.Header>\n        <Modal.Content image>\n          <Image wrapped size='medium' src='https://react.semantic-ui.com/images/avatar/large/rachel.png' />\n          <Modal.Description>\n            <Header>Default Profile Image</Header>\n            <p>We've found the following gravatar image associated with your e-mail address.</p>\n            <p>Is it okay to use this photo?</p>\n          </Modal.Description>\n        </Modal.Content>\n      </Modal>\n      <Map google={this.props.google}\n        zoom={2}\n        style={mapStyles}\n        initialCenter={{ lat: 0, lng: 0 }}\n        onClick={this.onMapClicked}>\n        {/*<InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n          size='big'>\n          <Item relaxed>\n            <div>{this.state.activeMarker === null ?\n              <h4>...</h4>\n              :\n              <div><h2>{this.state.activeMarker.title}</h2>\n                <h4>{this.state.activeMarker.name}</h4></div>\n            }<Button icon>\n                <Icon name='expand'\n                />\n              </Button></div>\n          </Item>\n          </InfoWindow>*/}\n        {this.renderMarkers()}\n      </Map ></div>)\n  }\n}\n\nexport default GoogleApiWrapper(({ apiKey, language }) => ({\n  apiKey: apiKey,\n  language: language\n}))(MapContainer)\n\n\n","import React from 'react'\nimport { Container, Divider, Image } from 'semantic-ui-react'\n\nconst Images = [\n  <Container>\n  </Container>\n]\n\nexport default Images\n","import React from 'react'\nimport { Button, Form, Grid, Icon, Header, Image, Message, Segment } from 'semantic-ui-react'\n\nconst LoginForm = () => (\n  <div className='login-form'>\n    <style>{`\n      body > div,\n      body > div > div,\n      body > div > div > div.login-form {\n        height: 100%;\n      }\n    `}</style>\n    <Grid textAlign='center' style={{ height: '100%' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='blue' textAlign='center'>\n          <Icon name='plane' /> Log in to account\n        </Header>\n        <Form size='large' /*loading success error field error*/>\n          <Segment>\n            <Form.Input fluid icon='user' iconPosition='left' placeholder='Username' />\n            <Form.Input\n              fluid\n              icon='lock'\n              iconPosition='left'\n              placeholder='Password'\n              type='password'\n            />\n\n            <Button color='blue' fluid size='large'>\n              Login\n            </Button>\n          </Segment>\n        </Form>\n        <Message>\n          <a href='#'>Create Account</a>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  </div>\n)\n\nexport default LoginForm\n\n/*import React from 'react'\nimport Blog from './components/Blog'\nimport Togglable from './components/Togglable'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport BlogForm from './components/BlogForm'\nimport loginService from './services/login'\nimport blogService from './services/blogs'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      username: '',\n      password: '',\n      blogs: [],\n      user: null,\n      loginVisible: false,\n      message: '',\n      color: ''\n    }\n  }\n\n    const data = await blogService.getAll()\n    const blogs = data\n      .sort(compare)\n      .map(blog =>\n        <Blog\n          key={blog.id}\n          id={blog.id}\n          user={blog.user}\n          likes={blog.likes}\n          author={blog.author}\n          title={blog.title}\n          url={blog.url}\n        />\n      )\n\n    this.setState({ blogs })\n\n    const loggedInUserJSON = window.localStorage.getItem('loggedInUser')\n    if (loggedInUserJSON) {\n      const user = JSON.parse(loggedInUserJSON)\n      this.setState({ user })\n      blogService.setToken(user.token)\n    }\n  }\n\n  handleFieldChange = (event) => this.setState({ [event.target.name]: event.target.value })\n\n  login = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username: this.state.username,\n        password: this.state.password\n      })\n\n      window.localStorage.setItem('loggedInUser', JSON.stringify(user))\n      blogService.setToken(user.token)\n      this.setState({ username: '', password: '', user: user })\n      this.notify(`${this.state.user.username} logged in succesfully!`, 'green')\n    } catch (exception) {\n      console.log(exception)\n      this.notify('invalid username or password!', 'red')\n    }\n  }\n\n  logout = () => () => {\n    blogService.setToken(null)\n    window.localStorage.removeItem('loggedInUser')\n    this.notify(`${this.state.user.username} logged out succesfully!`, 'green')\n    this.setState({ user: null })\n  }\n\n  addBlog = () => () => {\n    const newBlog = {\n      title: this.state.newTitle,\n      author: this.state.newAuthor,\n      url: this.state.newUrl\n    }\n    blogService.create(newBlog)\n  }\n\n  notify = (message, color) => {\n    this.setState({ message, color })\n    setTimeout(() => {\n      this.setState({\n        message: null,\n        color: null\n      })\n    }, 2000)\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>BLOG LIST</h1>\n        <Notification message={this.state.message} color={this.state.color} />\n        {this.state.user === null ?\n          <div>\n            <Togglable buttonLabel=\"login\">\n              <LoginForm\n                onSubmit={this.login}\n                handleChange={this.handleFieldChange}\n                username={this.state.username}\n                password={this.state.password} />\n            </Togglable>\n          </div> :\n          <div>\n            <h2>{this.state.user.username} logged in <button onClick={this.logout()}>logout</button></h2>\n            <Togglable buttonLabel=\"new blog\">\n              <BlogForm\n                onSubmit={this.addBlog()}\n                handleChange={this.handleFieldChange}\n                title={this.state.newTitle}\n                author={this.state.newAuthor}\n                url={this.state.newUrl} />\n            </Togglable>\n            <h2>Blogs</h2>\n            {this.state.blogs}\n          </div>}\n      </div>\n    )\n  }\n}\n\nexport default App\n*/\n","import React, { Component } from 'react'\nimport GoogleApiWrapper from './GoogleApiWrapper'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Container, Divider } from 'semantic-ui-react'\nimport dataService from './services/Data'\nimport AddMenu from './components/AddMenu'\nimport AddRouting from './components/AddRouting'\nimport LoginForm from './LoginForm'\n\nexport class App extends Component {\n  state = {\n    loggedIn: true\n  }\n\n  render() {\n    return this.state.loggedIn ? (\n      <GoogleApiWrapper\n        apiKey='AIzaSyCy6G0q6EnGtGPGAAvLlC37STQU4Med0xE'\n        language={'en'}\n      />\n    ) : (\n      <LoginForm />\n    )\n  }\n}\n\n/*class App extends Component {\n  state = {\n    english: false,\n    data: {\n      en: { bio: [], skills: [], experience: [] },\n      fi: { bio: [], skills: [], experience: [] }\n    }\n  }\n\n  async componentWillMount() {\n    const data = await dataService.getData()\n    this.setState({ data })\n  }\n\n  changeLanguage = () => this.setState({ english: !this.state.english })\n\n  render() {\n    return (\n      <Router>\n        <Container>\n          <Divider hidden />\n          <AddMenu en={this.state.english} change={this.changeLanguage} />\n          <Divider hidden />\n          <Divider hidden />\n          <AddRouting en={this.state.english} data={this.state.data} />\n          <Divider hidden />\n          <Divider hidden />\n          <Divider hidden />\n        </Container>\n      </Router>\n    )\n  }\n}*/\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'))\n"],"sourceRoot":""}